import json
import os
import logging
from datetime import datetime, timedelta
import asyncio
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes

TOKEN = '—Å—é–¥–∞ –≤—Å—Ç–∞–≤—å —Å–≤–æ–π —Ç–æ–∫–µ–Ω –æ—Ç –±–æ—Ç–∞'

tasks_file = 'tasks.json'

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)

# –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞—á
def load_tasks():
    if os.path.exists(tasks_file):
        with open(tasks_file, 'r', encoding='utf-8') as f:
            return json.load(f)
    return []

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
def save_tasks(tasks):
    with open(tasks_file, 'w', encoding='utf-8') as f:
        json.dump(tasks, f, ensure_ascii=False, indent=2)

# –ü–∞—Ä—Å–∏–Ω–≥ —Å–æ–æ–±—â–µ–Ω–∏–π
def parse_task(message_text):
    now = datetime.now()
    text = message_text.lower()

    if "–∑–∞–≤—Ç—Ä–∞" in text:
        date = now + timedelta(days=1)
    elif "—Å–µ–≥–æ–¥–Ω—è" in text:
        date = now
    elif "–ø–æ—Å–ª–µ–∑–∞–≤—Ç—Ä–∞" in text:
        date = now + timedelta(days=2)
    else:
        date = now

    # –ü–æ–∏—Å–∫ –≤—Ä–µ–º–µ–Ω–∏
    time_part = None
    for word in text.split():
        if ':' in word:
            try:
                time_part = datetime.strptime(word, "%H:%M").time()
                break
            except ValueError:
                continue

    if not time_part:
        time_part = datetime.strptime("09:00", "%H:%M").time()  # –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ, —Å—Ç–∞–≤–∏–º 9 —É—Ç—Ä–∞

    dt = datetime.combine(date.date(), time_part)
    task_name = message_text

    return {"name": task_name, "datetime": dt.strftime("%Y-%m-%d %H:%M"), "done": False}

# –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–ª–∞–Ω–∞ –Ω–∞ –¥–µ–Ω—å
async def send_morning_plan(context: ContextTypes.DEFAULT_TYPE):
    tasks = load_tasks()
    today = datetime.now().strftime("%Y-%m-%d")
    plan = [task for task in tasks if task['datetime'].startswith(today) and not task['done']]

    if plan:
        message = "üìã –ü–ª–∞–Ω –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
        for task in plan:
            time_part = task['datetime'].split()[1]
            message += f"- {task['name']} –≤ {time_part}\n"
        await context.bot.send_message(chat_id=context.job.chat_id, text=message)

# –°–ø—Ä–∞—à–∏–≤–∞—Ç—å –≤–µ—á–µ—Ä–æ–º
async def send_evening_check(context: ContextTypes.DEFAULT_TYPE):
    await context.bot.send_message(chat_id=context.job.chat_id, text="‚úÖ –ß—Ç–æ —Ç—ã —É—Å–ø–µ–ª —Å–¥–µ–ª–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è? –ù–∞–ø–∏—à–∏:\n'–í—ã–ø–æ–ª–Ω–∏–ª: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏' –∏–ª–∏ '–ü–µ—Ä–µ–Ω–µ—Å—Ç–∏: –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏'")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
async def check_reminders(app):
    while True:
        now = datetime.now()
        tasks = load_tasks()
        for task in tasks:
            task_time = datetime.strptime(task['datetime'], "%Y-%m-%d %H:%M")
            delta = task_time - now
            if timedelta(minutes=19) < delta <= timedelta(minutes=20) and not task.get('reminded', False):
                chat_id = task.get('chat_id')
                if chat_id:
                    await app.bot.send_message(chat_id=chat_id, text=f"üîî –ß–µ—Ä–µ–∑ 20 –º–∏–Ω—É—Ç: {task['name']} –≤ {task_time.strftime('%H:%M')}")
                    task['reminded'] = True
                    save_tasks(tasks)
        await asyncio.sleep(60)

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏. –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É!")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    message_text = update.message.text

    if message_text.lower().startswith('–≤—ã–ø–æ–ª–Ω–∏–ª:'):
        task_name = message_text[9:].strip()
        tasks = load_tasks()
        for task in tasks:
            if task_name.lower() in task['name'].lower():
                task['done'] = True
        save_tasks(tasks)
        await update.message.reply_text(f"‚úÖ –ó–∞–¥–∞—á–∞ '{task_name}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!")

    elif message_text.lower().startswith('–ø–µ—Ä–µ–Ω–µ—Å—Ç–∏:'):
        task_name = message_text[10:].strip()
        tasks = load_tasks()
        for task in tasks:
            if task_name.lower() in task['name'].lower():
                old_datetime = datetime.strptime(task['datetime'], "%Y-%m-%d %H:%M")
                new_datetime = old_datetime + timedelta(days=1)
                task['datetime'] = new_datetime.strftime("%Y-%m-%d %H:%M")
                task['done'] = False
                task['reminded'] = False
        save_tasks(tasks)
        await update.message.reply_text(f"üîÑ –ó–∞–¥–∞—á–∞ '{task_name}' –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–∞ –Ω–∞ –∑–∞–≤—Ç—Ä–∞!")

    else:
        task = parse_task(message_text)
        task['chat_id'] = update.message.chat_id
        tasks = load_tasks()
        tasks.append(task)
        save_tasks(tasks)
        await update.message.reply_text(f"üìù –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task['name']} –Ω–∞ {task['datetime']}")

# –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    scheduler = AsyncIOScheduler(timezone="Europe/Riga")
    scheduler.add_job(send_morning_plan, CronTrigger(hour=8, minute=0), kwargs={'context': app})
    scheduler.add_job(send_evening_check, CronTrigger(hour=17, minute=0), kwargs={'context': app})
    scheduler.start()

    asyncio.create_task(check_reminders(app))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω! ‚úÖ")
    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())